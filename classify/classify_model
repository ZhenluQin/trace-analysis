from __future__ import absolute_import, division, print_function
import os
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow.contrib.eager as tfe
tf.enable_eager_execution()

# train_file = "3333.csv"
train_file = "3333.csv"
test_file = "2222.csv"


# CSV_COLUMN_NAMES = [ 'count', 'label']
# label = [0, 1]
#
# def load_data(y_name='label'):
#     """return (train_x, train_y), (test_x, test_y) """
#
#     # deign the CSV_COLUMN_NAMES to input the csv
#     train = pd.read_csv(train_file, names=CSV_COLUMN_NAMES, header=0)
#     # train_x: featuresï¼Œtrain_y: label
#     train_x, train_y = train, train.pop(y_name)
#
#     # test
#     test = pd.read_csv(test_file, names=CSV_COLUMN_NAMES, header=0)
#     test_x, test_y = test, test.pop(y_name)
#
#     return (train_x, train_y), (test_x, test_y)
#
# (train_x, train_y),(test_x, test_y)  = load_data('label')
# my_feature_columns = [
#     tf.feature_column.numeric_column(key='count'),
# ]
#
# for key in train_x.keys():
#     my_feature_columns.append(tf.feature_column.numeric_column(key=key))
#
# classifier = tf.estimator.DNNClassifier(
#         feature_columns=my_feature_columns,
#         hidden_units=[10, 10],
#         n_classes=3)
# def train_input_fn(features, labels, batch_size):
#     dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))
#     dataset = dataset.shuffle(buffer_size=1000).repeat(count=None).batch(batch_size)
#
# classifier.train(
#         input_fn=lambda:train_input_fn(my_feature_columns, label, 150),
#         steps=1000)
#
# def eval_input_fn(features, labels, batch_size):
#     
#     features=dict(features)
#     if labels is None:
#         
#         inputs = features
#     else:
#         inputs = (features, labels)
#
#     # generate dataset.
#     dataset = tf.data.Dataset.from_tensor_slices(inputs)
#
#     # batch 
#     assert batch_size is not None, "batch_size must not be None"
#     dataset = dataset.batch(batch_size)
#
#     # return
#     return dataset.make_one_shot_iterator().get_next()

def parse_csv(line):
    example_defaults = [[0.],[0.], [0]]  # sets field types
    parsed_line = tf.decode_csv(line, example_defaults)
    # First 4 fields are features, combine into single tensor
    features = tf.reshape(parsed_line[:-1], shape=(2,))
    # Last field is the label
    label = tf.reshape(parsed_line[-1], shape=())
    return features, label


train_dataset = tf.data.TextLineDataset(train_file)
train_dataset = train_dataset.skip(1)  # skip the first header row
train_dataset = train_dataset.map(parse_csv)  # parse each row
train_dataset = train_dataset.shuffle(buffer_size=100)  # randomize
train_dataset = train_dataset.batch(3)

# View a single example entry from a batch
features, label = iter(train_dataset).next()
print("example features:", features[0])
print("example label:", label[0])

model = tf.keras.Sequential([
  tf.keras.layers.Dense(10, activation="relu", input_shape=(2,)),  # input shape required
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(3)])

# loss and grad
def loss(model, x, y):
  y_ = model(x)
  return tf.losses.sparse_softmax_cross_entropy(labels=y, logits=y_)

def grad(model, inputs, targets):
  with tf.GradientTape() as tape:
    loss_value = loss(model, inputs, targets)
  return tape.gradient(loss_value, model.variables)

#optimizer
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.99997)
#train
## Note: Rerunning this cell uses the same model variables

# keep results for plotting
train_loss_results = []
train_accuracy_results = []

num_epochs = 401

for epoch in range(num_epochs):
  epoch_loss_avg = tfe.metrics.Mean()
  epoch_accuracy = tfe.metrics.Accuracy()

  # Training loop - using batches of 32
  for x, y in train_dataset:
    # Optimize the model
    grads = grad(model, x, y)
    optimizer.apply_gradients(zip(grads, model.variables),
                              global_step=tf.train.get_or_create_global_step())

    # Track progress
    epoch_loss_avg(loss(model, x, y))  # add current batch loss
    # compare predicted label to actual label
    epoch_accuracy(tf.argmax(model(x), axis=1, output_type=tf.int32), y)

  # end epoch
  train_loss_results.append(epoch_loss_avg.result())
  train_accuracy_results.append(epoch_accuracy.result())

  if epoch % 56 == 0:
    print("Epoch {:03d}: Loss: {:.3f}, Accuracy: {:.3%}".format(epoch,
                                                                epoch_loss_avg.result(),
                                                                epoch_accuracy.result()))

# fig, axes = plt.subplots(2, sharex=True, figsize=(12, 8))
# fig.suptitle('Training Metrics')
#
# axes[0].set_ylabel("Loss", fontsize=14)
# axes[0].plot(train_loss_results)
#
# axes[1].set_ylabel("Accuracy", fontsize=14)
# axes[1].set_xlabel("Epoch", fontsize=14)
# axes[1].plot(train_accuracy_results)
#
# plt.show()

class_ids = ["0", "1", "2"]

predict_dataset = tf.convert_to_tensor([
    [128.0,178.0,],
    [256.2,234.1,],
    [311.2,398.1]
])

predictions = model(predict_dataset)

for i, logits in enumerate(predictions):
  class_idx = tf.argmax(logits).numpy()
  name = class_ids[class_idx]
  print("Example {} prediction: {}".format(i, name))
